(cl:in-package #:sicl-boot-compile-and-tie)

;;; During bootstrapping, code is generated by the compiler and
;;; assembler running in the host.  The result of the assembly phase
;;; is a host vector of bytes.  It may or may not be a specialized
;;; vector, depending on the existence of vectors of (unsigned-byte 8)
;;; in the host.  But either way, we must store it in the simulated
;;; memory, so we first create a target equivalent vector, represented
;;; as an ersatz object.  Then we transfer the individual bytes to the
;;; target vector.  Finally, we call SICL-BOOT:POINTER to store the
;;; target vector in simulated memory.

(defun store-code-vector (code-vector)
  (let ((sicl-client:*client* (make-instance 'client))
        (length (length code-vector)))
    (symbol-macrolet ((client sicl-client:*client*))
      (let ((make-array (env:fdefinition client sicl-boot:*e5* 'make-array))
            (setf-aref (env:fdefinition client sicl-boot:*e5* '(setf aref))))
        (let ((result (funcall make-array length
                               :element-type '(unsigned-byte 8))))
          ;; Transfer the bytes to the target vector.
          (loop for i from 0 below length
                do (funcall setf-aref (aref code-vector i) result i))
          (sicl-boot:pointer result))))))
