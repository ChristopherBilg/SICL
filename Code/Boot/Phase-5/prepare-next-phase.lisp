(cl:in-package #:sicl-boot-phase-5)

(defun prepare-next-phase (e3 e4 e5)
  (declare (ignore e3))
  (load-source-file "CLOS/class-of-defun.lisp" e5)
  (enable-typep e5)
  (enable-object-creation e4 e5)
  ;; (create-additional-generic-functions e5)
  ;; (setf (env:fdefinition (env:client e5) e5 'compile)
  ;;       (lambda (x lambda-expression)
  ;;         (assert (null x))
  ;;         (assert (and (consp lambda-expression) (eq (first lambda-expression) 'lambda)))
  ;;         (let* ((cst (cst:cst-from-expression lambda-expression))
  ;;                (ast (cleavir-cst-to-ast:cst-to-ast (env:client e5) cst e5)))
  ;;           (ast-eval ast (env:client e5) e5))))
  ;; (enable-array-access e5)
  ;; (load-source-file "CLOS/class-of-defun.lisp" e5)
  ;; (enable-slot-value e5)
  ;; (enable-method-combinations e3 e5)
  ;; (enable-generic-function-creation e5)
  ;; (enable-printing e5)
  ;; (finalize-inheritance e4)))
  )

