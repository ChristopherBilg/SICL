(cl:in-package #:sicl-boot-phase-8)

(defun who-calls-from-function (cell name function environment)
  (let* ((fname 'sicl-clos::environment)
         (env (funcall (sicl-genv:fdefinition fname environment) function)))
    (when (find cell env :test #'eq)
      (format *trace-output* "~s~%" name))))
    
(defun who-calls-from-generic-function (cell name function environment)
  (loop for method in (funcall (sicl-genv:fdefinition 'sicl-clos:generic-function-methods environment) function)
        for method-function = (funcall (sicl-genv:fdefinition 'sicl-clos:method-function environment) method)
        do (who-calls-from-function cell name method-function environment)))

(defun function-is-generic-function-p (function environment)
  (funcall (sicl-genv:fdefinition 'typep environment) function 'generic-function))

(defun function-is-sicl-function-p (function)
  (typep function 'sicl-boot::header))

(defun who-calls (function-name environment)
  (let* ((table (make-hash-table :test #'eq))
         (cell (sicl-genv:function-cell function-name environment)))
    (do-all-symbols (symbol)
      (unless (gethash symbol table)
        (setf (gethash symbol table) t)
        (when (and (sicl-genv:fboundp symbol environment)
                   (not (sicl-genv:special-operator symbol environment))
                   (null (sicl-genv:macro-function symbol environment)))
          (let ((function (sicl-genv:fdefinition symbol environment)))
            (when (function-is-sicl-function-p function)
              (who-calls-from-function cell symbol function environment)
              (when (function-is-generic-function-p function environment)
                (who-calls-from-generic-function cell symbol function environment)))))
        (when (sicl-genv:fboundp `(setf ,symbol) environment)
          (let ((function (sicl-genv:fdefinition `(setf ,symbol) environment)))
            (when (function-is-sicl-function-p function)
              (who-calls-from-function cell `(setf ,symbol) function environment)
              (when (function-is-generic-function-p function environment)
                (who-calls-from-generic-function cell `(setf ,symbol) function environment)))))))))
