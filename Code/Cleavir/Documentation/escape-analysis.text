For each ENCLOSE instruction E, we define a set DESTINY(E) that may
contain FUNCALL instructions or the special symbol :ESCAPE.

For each FUNCALL instruction F, we define a set ORIGIN(F) that may
contain ENCLOSE instructions, FDEFINITION instructions, or the special
symbol :UNKNOWN.

To compute the DESTINY of an ENCLOSE instruction, start with a
singleton set containing the variable that is the output of the
ENCLOSE instruction.  If any variable in the set is the input of an
assignment instruction, include the output of that instruction in the
set, unless it is already in the set.  Continue until no more
variables can be added to the set.  For every variable in the set that
is the input of a FUNCALL instruction, include that instruction in the
DESTINY.  If any variable is the input of any other instruction,
include :ESCAPE in the DESTINY.

To compute the ORIGIN of a FUNCALL instruction, start with the
singleton set containing the variable that is the first input of the
FUNCALL instruction.  If any variable in the set is the output of an
assignment instruction, include the input of that instruction in the
set, unless it is already in the set.  Continue until no more
variables can be added to the set.  For every variable that is in the
set that is the output of an ENCLOSE instruction, include that
instruction in the ORIGIN.  For every variable that is the output of
an FDEFINITION instruction, include that instruction in the ORIGIN.
If any variable is the output of any other instruction, include
:UNKNOWN in the ORIGIN.

A TOP-LEVEL function is a function that does not contain any free
lexical variables.  Notice that a function can be a top-level function
even though it is nested inside another function.

A function is said to be SIMPLE if it is a top-level function and it
does not contain any nested function containing :ESCAPE in its
DESTINY.  Whether the function itself has :ESCAPE in its DESTINY does
not influence its classification as being simple.  Simple functions
have a very precise control flow.

Eventually, we will do some more sophisticated analyses given these
sets, but initially, we process only simple functions.

We next compute the CALL GRAPH which is a directed graph that contains
ENTER instructions as its vertices.  The arcs of the graph represent
the MAY-CALL relation, so that there is an arc from vertex E1 to
vertex E2 if the function that starts with E1 contains a FUNCALL
instruction such that E2 is an element of ORIGIN(E1).

Within each function (i.e. we do not follow FUNCALL instructions) we
now introduce a special type of data arc going from a FUNCALL
instruction to a variable as follows.  Let V be a variable owned by
some function represented by an ENTER instruction E1 and that is the
output of some instruction I in a function represented by ENTER
instruction E2 /= E1.  Let F be a FUNCALL instruction owned by E1 and
let O be the ORIGIN of F.  For each ENTER instruction E of O, if E
calls E2 (directly or indirectly), then add a special arc from F to
V.

Now, we can do value numbering per function by considering FUNCALL
instructions as being unknown operations that assign unknown values to
the output variables, but also to the variables indicated by special
arcs.
