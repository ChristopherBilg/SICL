I think we should define the project as several "levels of success".
By doing it this way, we can stop and declare success at any point in
time, as opposed to running the risk of an incomplete project with
nothing to show for it.

Level 0: We concentrate on mechanism, and we are not concerned about
cases where the mechanism can not be applied.  Nor are we concerned
about policy, i.e. whether the mechanism SHOULD be applied (provided
it can).

Example: inlining loop-free functions with no references to free
variables.  Let's call them SIMPLE functions.  The example is shown as
Common Lisp code, but in reality should be done in HIR.

Let's say we have the following global definition:

(defun car (x)
  (if (consp x)
      (cleavir-primop:car x)
      (if (null x)
          nil
          (error ... x))))

And let's say we have some function F that calls CAR:

(defun f (...)
  ...
  (car <form>)
  ...)

Step 1, we inline CAR:

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x)))))
    ...
    (car <form>)
    ...))

Step 2, we wrap <form> in a LET (this step won't be necessary in HIR):

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x)))))
    ...
    (let ((y <form>))
      (car y))
    ...))

Step 3, we inline the IF form:

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x))))
         (car1 (x)
           (cleavir-primop:car x))
         (car2 (x)
           (if (null x)
               nil
               (error ... x))))
    ...
    (let ((y <form>))
      (if (consp y)
          (car1 y)
          (car2 y)))
    ...))

Now we have two calls that can be inlined.  Let's start with the call
to CAR1:

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x))))
         (car1 (x)
           (cleavir-primop:car x))
         (car2 (x)
           (if (null x)
               nil
               (error ... x))))
    ...
    (let ((y <form>))
      (if (consp y)
          (cleavir-primop:car x)
          (car2 y)))
    ...))

Now, do the call to car2:

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x))))
         (car1 (x)
           (cleavir-primop:car x))
         (car2 (x)
           (if (null x)
               nil
               (error ... x)))
         (car3 (x)
           nil)
         (car4 (x)
           (error ... x)))
    ...
    (let ((y <form>))
      (if (consp y)
          (cleavir-primop:car x)
          (if (null y)
              (car3 y)
              (car4 y))))
    ...))

Finally, do the call to car3:

(defun f (...)
  (flet ((car (x)
           (if (consp x)
               (cleavir-primop:car x)
               (if (null x)
                   nil
                   (error ... x))))
         (car1 (x)
           (cleavir-primop:car x))
         (car2 (x)
           (if (null x)
               nil
               (error ... x)))
         (car3 (x)
           nil)
         (car4 (x)
           (error ... x)))
    ...
    (let ((y <form>))
      (if (consp y)
          (cleavir-primop:car x)
          (if (null y)
              nil
              (car4 y))))
    ...))

We can stop there.  there is no need to inline car4, because it just
calls ERROR.

The example above suggests that new functions are created, but that is
not entirely true.  In HIR, a new ENTER instruction will be created,
but it will have a different successor from the original ENTER
instruction.  They will share some code, effectively turning the
function into one with multiple entry points.  Such a function can not
be expressed as Common Lisp source code, which is why I had to
duplicate the function body in the example.

Level 1: Handling loops.

I think that loops can be handled by keeping a hash table for each
CALL instruction, mapping original instructions to inlined
instructions.  When an attempt is made to inline an instruction that
has already been inlined, the CALL instruction is replaced by a NOP
instruction with the original translated instruction as its target.  I
have not thought about the situations in which this transformation is
valid, but it is certainly valid in some situations.

The definition of SIMPLE function needs to be more precise.  For one
thing, I suggest handling only functions with required parameters that
are all lexical variables.
