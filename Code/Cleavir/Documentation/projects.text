Possible Cleavir-related projects.

Source information is currently propagated from CSTs to ASTs, but not
yet from ASTs to HIR.  This needs to be the case for efficient source
tracking at run time.

Many optimizations require a precise data-flow analysis.  A
prerequisite for such an analysis is a precise control-flow analysis.
Unfortunately, a precise control-flow analysis requires a precise
data-flow analysis, at least of the function objects that are called.
We think the solution to this problem is a matter of successive
refinement.  We already have a very course control-flow analysis that
reveals that some functions can only be invoked by certain FUNCALL
instructions.  This analysis can then be used to obtain a more precise
one.  We need a way to represent the result of the control flow
analysis that shows from where a function can be called, and whether
it might be called from arbitrary threads.

Once we have a representation of the control flow, we need a
representation of the data flow as well.  This representation must
take into account the fact that some variables may be assigned to in a
different thread at some arbitrary point in time.

The translation from AST to HIR involves the generation of a large
number of temporary variables, many of which contain the same values,
or the same value as some non-temporary variable.  For some
optimizations such as type inference and path replication to work
well, we need information about variables that contain the same value.
To determine the equivalence classes between variables at various
program points, we need an implementation of value numbering that uses
Kildall's algorithm.  To start with, we only need to consider
assignment instructions, i.e. we can assume that all other instruction
types generate some random output.

We need to implement path replication, at least for some special cases
such as multiple tests for CONSP or NULL, and also for FIXNUM-ADD
which is also a test instruction because it has two output branches
according to whether the result is a fixnum or not.

Currently, the compiler considers a lexical variable live from the
first creation until it is no longer referenced.  For reasons of
debugging, it might be valuable to keep a variable live for the
duration of its scope.  We need to introduce ASTs and HIR constructs
to allow for this feature.

I would like to experiment with doing certain transformations at
different times.  For example, right now, non-trivial constants are
turned into LOAD-TIME-VALUE forms when the AST is created.  I would
like to have the option of leaving constants in the AST and process
them at the HIR level, so that type inference, constant propagation,
value numbering, etc., can use the information in constants.  There
must then be a HIR transformation that takes remaining constants and
turn them into LOAD-TIME-VALUE calls. 

Research project.  Read up on published optimization techniques that
claim to require SSA.  Check whether they really do, i.e. if they
really need for each variable to be assigned at exactly one place in
the code.  Some algorithms use other features of SSA, and in
particular the property that every possible static version of a
variable is kept.  But SSA is not the only possible notation with this
property.  I know of only one published paper that requires SSA (for
value numbering), because they treat the PHI function as an operator.
By doing that, they miss many optimization opportunities.

SSA form has some good properties, but also some bad ones.  One good
property is that old values of variables are preserved, so that they
are available for other optimizations such as value numbering.  One
very bad property is that PHI instruction make the order of the
predecessors important, which is normally not the case in a flow
graph.  We would like to use a similar form, say SFA for Static Few
Assignments instead of SSA.  It is very similar to SSA.  The only
difference is that, instead of PHI instructions, there are explicit
assignment instructions preceding a block that would otherwise start
with a PHI instruction.  Notice that whether it is possible to apply
this transformation depends on how the variable in question is used.
If it is used or assigned to in some arbitrary independent thread,
this transformation is not applicable.

Some of the optimizations on intermediate code require that the data
to be only Common Lisp objects, which is the case with HIR.  In
particular, type inference crucially depends on this property.  Once
these optimizations have been applied, the HIR code should be
translated to MIR.  In MIR, address calculations are exposed and some
such calculations are subject to subsequent optimizations such as
loop-invariant code motion.  However, since Clasp is the only Cleavir
client and Clasp goes directly from HIR to LLVM, we have not worked on
MIR for some time.  What we have is outdated and insufficient.  We
need to design MIR instructions that resemble instructions in existing
processors, both CISC and RISC, so that client code can choose what
instructions to use for different backends.
