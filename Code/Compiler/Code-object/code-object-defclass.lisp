(cl:in-package #:sicl-compiler)

(defgeneric instruction (call-site))

(defgeneric name (call-site))

;;; A CALL-SITE or a "call-site descriptor" is an object that contains
;;; information about a call site, i.e., an instruction that results
;;; in a function being called.  An instance of this class is
;;; generated by the compiler for each call site, and it is used for
;;; two purposes.
;;;
;;;   * It is passed as an implicit argument to the callee.  The
;;;     callee then stores it at a fixed offset from the frame pointer
;;;     in its stack frame.  There, it can be used by the backtrace
;;;     inspector to access source information, and to display values
;;;     of arguments that are known to be live.  It can also be used
;;;     by the debugger to access information about any live variables
;;;     at the call site.  Finally, it is used by the garbage
;;;     collector to determine which stack locations might contain
;;;     objects that need to be traced.
;;;
;;;   * When the call is to a global, named function, it is used by
;;;     the call-site manager to create trampoline snippets between
;;;     the caller and the callee.  Such a snippet is created when the
;;;     code object is tied to a particular global environment, and
;;;     when the named callee is being redefined.

(defclass call-site ()
  ((%instruction :initarg :instruction :reader instruction)
   (%name :initarg :name :reader name)))

(defgeneric instructions (code-object))

(defgeneric (setf instructions) (instructions code-object))

(defgeneric frame-maps (code-object))

(defgeneric (setf frame-maps) (frame-maps code-object))

(defgeneric callee-saves-register-maps (code-object))

(defgeneric (setf callee-saves-register-maps) (maps code-object))

(defgeneric callee-saves-stack-maps (code-object))

(defgeneric (setf callee-saves-stack-maps) (maps code-object))

(defgeneric constants (code-object))

(defgeneric call-sites (code-object))

(defgeneric (setf call-sites) (call-sites code-object))

(defgeneric function-names (code-object))

(defgeneric (setf function-names) (function-names code-object))

(defgeneric ast (code-object))

(defgeneric (setf ast) (ast code-object))

(defgeneric ir (code-object))

(defgeneric (setf ir) (ir code-object))

(defgeneric hir-thunks (code-object))

(defgeneric (setf hir-thunks) (hir-thunks code-object))

(defclass code-object ()
  ((%instructions :initform '() :accessor instructions)
   (%frame-maps :initform '() :accessor frame-maps)
   (%callee-saves-register-maps
    :initform '()
    :accessor callee-saves-register-maps)
   (%callee-saves-stack-maps
    :initform '()
    :accessor callee-saves-stack-maps)
   (%constants :initform (make-array 0 :adjustable t :fill-pointer t)
               :reader constants)
   (%call-sites :initform '() :accessor call-sites)
   (%function-names :initform '() :accessor function-names)
   (%ast :initarg :ast :accessor ast)
   (%ir :initarg :ir :accessor ir)
   (%hir-thunks :initform nil :accessor hir-thunks)))
