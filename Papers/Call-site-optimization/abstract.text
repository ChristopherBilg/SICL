A function call in a language such as Common Lisp can be fairly
costly.  Not only is an indirection required so that a redefinition of
the callee can take effect for subsequent calls, but several features
of Common Lisp can have an even greater impact on the performance of
function calls.  The presence of optional parameters and/or keyword
parameters requires some non-trivial argument parsing in the callee.
And when the callee is a generic function, it must invoke the
discriminating function in order to dispatch to the effective method
that is determined by the arguments.  Restrictions such as the
required boxing of all arguments can make function calls slow for
full-word integer and floating-point numbers.

In this paper, we propose a very general technique for improving the
performance of function calls in Common Lisp.  Our technique is based
on call-site optimization, meaning that each call site can be
automatically customized for the callee according to the number and
the types of the arguments being transmitted to the callee.  Our
technique is based on the call site being implemented as an
unconditional jump to a trampoline snippet that is generated by the
callee according to information provided by the caller with respect to
the arguments.  Thus, the callee is able to fully customize the call,
thereby avoiding many costly steps of a function call such as
indirections, boxing/unboxing, argument parsing, and more.
